//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.DualService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DualService.IDuplexService", CallbackContract=typeof(Client.DualService.IDuplexServiceCallback))]
    public interface IDuplexService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexService/GetData", ReplyAction="http://tempuri.org/IDuplexService/GetDataResponse")]
        System.Collections.Generic.List<string> GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexService/GetData", ReplyAction="http://tempuri.org/IDuplexService/GetDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexService/Subscribe", ReplyAction="http://tempuri.org/IDuplexService/SubscribeResponse")]
        System.Guid Subscribe(string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexService/Subscribe", ReplyAction="http://tempuri.org/IDuplexService/SubscribeResponse")]
        System.Threading.Tasks.Task<System.Guid> SubscribeAsync(string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexService/Unsubscribe", ReplyAction="http://tempuri.org/IDuplexService/UnsubscribeResponse")]
        bool Unsubscribe(System.Guid clientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDuplexService/Unsubscribe", ReplyAction="http://tempuri.org/IDuplexService/UnsubscribeResponse")]
        System.Threading.Tasks.Task<bool> UnsubscribeAsync(System.Guid clientID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDuplexService/TestCallback")]
        void TestCallback(System.Collections.Generic.List<string> testString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexServiceChannel : Client.DualService.IDuplexService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexServiceClient : System.ServiceModel.DuplexClientBase<Client.DualService.IDuplexService>, Client.DualService.IDuplexService {
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<string> GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public System.Guid Subscribe(string machineName) {
            return base.Channel.Subscribe(machineName);
        }
        
        public System.Threading.Tasks.Task<System.Guid> SubscribeAsync(string machineName) {
            return base.Channel.SubscribeAsync(machineName);
        }
        
        public bool Unsubscribe(System.Guid clientID) {
            return base.Channel.Unsubscribe(clientID);
        }
        
        public System.Threading.Tasks.Task<bool> UnsubscribeAsync(System.Guid clientID) {
            return base.Channel.UnsubscribeAsync(clientID);
        }
    }
}
